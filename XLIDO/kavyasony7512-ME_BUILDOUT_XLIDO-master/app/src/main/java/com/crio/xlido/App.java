/*
 * This Java source file was generated by the Gradle 'init' task.
 */
// Test your code by ading commands in sample_input/sample_input_one.txt
// Run run.sh script using "bash run.sh" in your terminal.

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.crio.xlido;

// import com.crio.xlido.commands.*;
// import com.crio.xlido.entities.Question;
// import com.crio.xlido.entities.Reply;
// import com.crio.xlido.services.*;
// import com.crio.xlido.repositories.*;
// import java.io.IOException;
// import java.nio.file.Files;
// import java.nio.file.Paths;
// import java.util.Arrays;
// import java.util.LinkedList;
// import java.util.List;

// public class App {
//     private final CommandInvoker commandInvoker = new CommandInvoker();
//     private UserService userService;
//     private EventService eventService;
//     private QuestionService questionService;
//     private ReplyService replyService;

//     public static void main(String[] args) {
//         if (args.length == 1) {
//             List<String> commandLineArgs = new LinkedList<>(Arrays.asList(args));
//             String inputFile = commandLineArgs.get(0).split("=")[1];
//             try {
//                 List<String> fileCommands = Files.readAllLines(Paths.get(inputFile));
//                 new App().run(fileCommands);
//             } catch (IOException e) {
//                 e.printStackTrace();
//             }
//             return;
//         }

//         // For testing with inline commands
//         List<String> inplaceCommands = new LinkedList<>() {{
//             // Add your test commands here
            
//         }};
//         new App().run(inplaceCommands);
//     }

//     public void run(List<String> commands) {
//         // Register commands
//         registerCommands();

//         for (String line : commands) {
//             if (line == null || line.trim().isEmpty()) {
//                 continue;
//             }

//             List<String> tokens = Arrays.asList(line.split(","));
//             if (tokens.isEmpty()) {
//                 continue;
//             }

//             String commandType = tokens.get(0);
//             try {
//                 switch (commandType) {
//                     case "CREATE_USER":
//                         commandInvoker.invoke(line);
//                         commandInvoker.register("CREATE_USER", new CreateUserCommand(userService));
//                         break;
//                     case "CREATE_EVENT":
//                         commandInvoker.invoke(line);
//                         break;
//                     case "DELETE_EVENT":
//                         commandInvoker.invoke(line);
//                         break;
//                     case "ADD_QUESTION":
//                         commandInvoker.invoke(line);
//                         break;
//                     case "DELETE_QUESTION":
//                         commandInvoker.invoke(line);
//                         break;
//                     case "UPVOTE_QUESTION":
//                         commandInvoker.invoke(line);
//                         break;
//                     case "REPLY_QUESTION":
//                         commandInvoker.invoke(line);
//                         break;
//                     case "LIST_QUESTIONS":
//                         Long eventId = Long.parseLong(tokens.get(1));
//                         String sortBy = tokens.get(2);
//                         List<Question> qList = questionService.listQuestion(eventId, sortBy);
//                         for (Question q : qList) {
//                             System.out.println("Question ID: " + q.getId());
//                             System.out.println("Content: " + q.getContent());
//                             System.out.println("Votes: " + (q.getUpvotedBy() == null ? 0 : q.getUpvotedBy().size()));
//                             System.out.println("Replies:");
//                             List<Reply> replies = replyService.findByQuestionId(q.getId());
//                             for (Reply reply : replies) {
//                                 System.out.println("  - User " + reply.getUserId() + ": " + reply.getReply());
//                             }
//                             System.out.println("");
//                         }
//                         break;
//                     default:
//                         throw new RuntimeException("INVALID_COMMAND");
//                 }
//             } catch (Exception e) {
//                 System.out.println("ERROR: " + e.getMessage());
//             }
//         }
//     }

//     private void registerCommands() {
//         // Instantiate repositories
//         IUserRepository userRepository = new UserRepository();
//         IEventRepository eventRepository = new EventRepository();
//         IQuestionRepository questionRepository = new QuestionRepository();
//         IReplyRepository replyRepository = new ReplyRepository();

//         // Instantiate services with repositories
//         userService = new UserService(userRepository);
//         eventService = new EventService(eventRepository, userRepository);
//         questionService = new QuestionService(questionRepository, userRepository, eventRepository);
//         replyService = new ReplyService(replyRepository, questionRepository, userRepository);

//         // Register commands with CommandInvoker
//         commandInvoker.register("CREATE_USER", new CreateUserCommand(userService));
//         commandInvoker.register("CREATE_EVENT", new CreateEventCommand(eventService));
//         commandInvoker.register("DELETE_EVENT", new DeleteEventCommand(eventService));
//         commandInvoker.register("ADD_QUESTION", new AddQuestionCommand(questionService));
//         commandInvoker.register("DELETE_QUESTION", new DeleteQuestionCommand(questionService));
//         commandInvoker.register("UPVOTE_QUESTION", new UpvoteQuestionCommand(questionService));
//         commandInvoker.register("REPLY_QUESTION", new ReplyQuestionCommand(replyService));
//         commandInvoker.register("LIST_QUESTIONS", new ListQuestionsCommand(questionService));
//     } 
// }

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import com.crio.xlido.entities.Event;
import com.crio.xlido.entities.Question;
import com.crio.xlido.entities.User;
import com.crio.xlido.repositories.EventRepository;
import com.crio.xlido.repositories.QuestionRepository;
import com.crio.xlido.repositories.UserRepository;
import com.crio.xlido.services.EventService;
import com.crio.xlido.services.QuestionService;
import com.crio.xlido.services.UserService;

public class App {

    private final UserService userService;
    private final EventService eventService;
    private final QuestionService questionService;

    // Constructor to initialize UserService
    public App() {

        // Initialize UserRepository and UserService
        UserRepository userRepository = new UserRepository();
        this.userService = new UserService(userRepository);

        EventRepository eventRepository = new EventRepository();
        this.eventService = new EventService(eventRepository, userRepository);  // Pass userRepository

        
         QuestionRepository questionRepository = new QuestionRepository();
         this.questionService = new QuestionService(questionRepository, eventRepository, userRepository);

    }
    public static void main(String[] args) {

        // Test your code by ading commands in sample_input/sample_input_one.txt
        // Run run.sh script using "bash run.sh" in your terminal.
        if (args.length == 1){
            List<String> commandLineArgs = new LinkedList<>(Arrays.asList(args));
            String inputFile = commandLineArgs.get(0).split("=")[1];
            try {
                List<String> file_commands = Files.readAllLines(Paths.get(inputFile));
                // Execute the commands
                new App().run(file_commands);
            } catch (IOException e) {
                e.printStackTrace();
            }
            return;
        }        

        // OR
        // Test your code by adding commands in this list
        List<String> inplace_commands = new LinkedList<>(){
            {
                add("CREATE_USER,test1@user.com,abcd");
                add("CREATE_USER,test2@user.com,1234");
                add("CREATE_USER,test1@user.com,xyz");
                add("CREATE_EVENT,Tech Conference,123");
                add("CREATE_EVENT,Workshop,456");
                add("DELETE_EVENT,1,1");
                add("DELETE_EVENT,2,1");
                add("DELETE_EVENT,1,2");
                add("DELETE_EVENT,2,3");

            }
        };

        new App().run(inplace_commands);
 
    }
    public void run(List<String> commands){

        Iterator<String> it = commands.iterator();
        while(it.hasNext()){
            String line = it.next();
                if(line == null){
                    break;
                }
                List<String> tokens = Arrays.asList(line.split(","));

                try {
                    //Execute Services
                    switch(tokens.get(0)){
                        case "CREATE_USER":CREATE_USER(tokens);
                        break;
                        case "CREATE_EVENT":CREATE_EVENT(tokens);
                        break;
                        case "DELETE_EVENT": DELETE_EVENT(tokens);
                        break;
                        case "ADD_QUESTION":ADD_QUESTION(tokens);
                        break;
                        case "DELETE_QUESTION":DELETE_QUESTION(tokens);
                        break;
                        case "UPVOTE_QUESTION":UPVOTE_QUESTION(tokens);
                        break;
                        case "REPLY_QUESTION":REPLY_QUESTION(tokens);
                        break;
                        case "LIST_QUESTIONS": LIST_QUESTIONS(tokens);
                        break;
                        default:
                            throw new RuntimeException("INVALID_COMMAND");
                }
                } catch (Exception e) {
                    System.out.println("ERROR: " + e.getMessage());
                }
        }
    }
        	// // CREATE_USER
     private void CREATE_USER(List<String> tokens){
          String email = tokens.get(1);
          String password = tokens.get(2);
          User user = userService.createUser(email, password);
         System.out.println("User ID: " +user.getId());   
     }

//  // CREATE_EVENT
//  private void CREATE_EVENT(List<String> tokens) {
//     String title = tokens.get(1);
//     Integer organizerId = Integer.parseInt(tokens.get(2));
//     Event event = eventService.createEvent(title, organizerId);
//     System.out.println("Event ID: " + event.getId());
// }
  
private void CREATE_EVENT(List<String> tokens) {
    String title = tokens.get(1);
    Long organizerId =Long.parseLong(tokens.get(2));
    try {
        Event event = eventService.createEvent(title, organizerId);
        System.out.println("Event ID: " + event.getId());
    } catch (RuntimeException e) {
        System.out.println("ERROR: " + e.getMessage());
    }
}

// private void DELETE_EVENT(List<String> tokens) {
//     Long eventId = Long.parseLong(tokens.get(1));
//     Long userId = Long.parseLong(tokens.get(2));
//     eventService.deleteEvent(eventId, userId);
// }

 // DELETE_EVENT
 private void DELETE_EVENT(List<String> tokens) {
    Long eventId = Long.parseLong(tokens.get(1));
    Long userId = Long.parseLong(tokens.get(2));
    try {
        boolean isDeleted = eventService.deleteEvent(eventId, userId);
        if (isDeleted) {
            System.out.println("EVENT_DELETED " + eventId);
        }
    } catch (RuntimeException e) {
        System.out.println("ERROR: " + e.getMessage());
    }
}


private void ADD_QUESTION(List<String> tokens) {
    String content = tokens.get(1);
    Long userId = Long.parseLong(tokens.get(2));
    Long eventId = Long.parseLong(tokens.get(3));
    
    try {
        Question question = questionService.addQuestion(content, userId, eventId);
        System.out.println("Question ID: " + question.getId());
    } catch (RuntimeException e) {
        System.out.println("ERROR: " + e.getMessage());
    }
}
private void DELETE_QUESTION(List<String> tokens) {
    Long questionId = Long.parseLong(tokens.get(1));
    Long userId = Long.parseLong(tokens.get(2));
    
    try {
        boolean isDeleted = questionService.deleteQuestion(questionId, userId);
        if (isDeleted) {
            System.out.println("QUESTION_DELETED " + questionId);
        }
    } catch (RuntimeException e) {
        System.out.println("ERROR: " + e.getMessage());
    }
}


private void UPVOTE_QUESTION(List<String> tokens) {
    Long questionId = Long.parseLong(tokens.get(1));
    Long userId = Long.parseLong(tokens.get(2));

    try {
        questionService.upvoteQuestion(questionId, userId);
        System.out.println("QUESTION_UPVOTED " + questionId);
    } catch (RuntimeException e) {
        System.out.println("ERROR: " + e.getMessage());
    }
}

// Method for REPLY_QUESTION command
private void REPLY_QUESTION(List<String> tokens) {
    String replyContent = tokens.get(1);
    Long questionId = Long.parseLong(tokens.get(2));
    Long userId = Long.parseLong(tokens.get(3));

    try {
        String result = questionService.replyToQuestion(replyContent, questionId, userId);
        System.out.println(result);
    } catch (RuntimeException e) {
        System.out.println("ERROR: " + e.getMessage());
    }
}


private void LIST_QUESTIONS(List<String> tokens) {
    Long eventId = Long.parseLong(tokens.get(1));
    String sortBy = tokens.get(2);

    try {
        List<Question> questions = questionService.listQuestions(eventId, sortBy);
        for (Question question : questions) {
            System.out.println("Question ID: " + question.getId());
            System.out.println("Content: " + question.getContent());
            System.out.println("Votes: " + question.getVoteCount());
            System.out.println("Replies:");
            question.getReplies().forEach(reply -> 
                System.out.println("  - User " + reply.getUserId() + ": " + reply.getContent())
            );
            System.out.println();

        }
    } catch (RuntimeException e) {
        System.out.println("ERROR: " + e.getMessage());
    }
}
}